# -*- coding: utf-8 -*-

# Settings file for Instanssi website/management system
#
# Some settings you should make sure to set correctly:
# DATABASES
# DEBUG
# TIME_ZONE
# LANGUAGE_CODE
# SECRET_KEY

# Get default context processors
from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS

# Get path
import os
CONTENTDIR = os.path.dirname(__file__)
PROJECTDIR = os.path.dirname(CONTENTDIR)

# Settings
DEBUG = True
ADMIN = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
#    ('Amy Admin', 'amy.admin@example.com'),
)
MANAGERS = ADMINS

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(PROJECTDIR, 'database.db'),
        'USER': '', 
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}

# Google api stuff
GOOGLE_API_KEY = ''
GOOGLE_ANALYTICS = False
GOOGLE_ANALYTICS_CODE = ''

# Generic stuff
TIME_ZONE = 'Europe/Helsinki'
LANGUAGE_CODE = 'fi-FI'
SHORT_LANGUAGE_CODE = 'fi'
SITE_ID = 1
USE_I18N = True
USE_L10N = False

# Hackish, but will do for now
SSL_ON = True
DOMAIN = 'instanssi.org'

# Make this unique, and don't share it with anybody.
SECRET_KEY = ''

# Twitter
TWITTER_OAUTH_TOKEN = ''
TWITTER_OAUTH_SECRET = ''
TWITTER_CONSUMER_KEY = ''
TWITTER_CONSUMER_SECRET = ''

# Facebook
SOCIAL_AUTH_FACEBOOK_KEY = ''
SOCIAL_AUTH_FACEBOOK_SECRET = ''
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {'locale': 'fi_FI'}

# Files
MEDIA_ROOT = os.path.join(PROJECTDIR, 'content/uploads/')
MEDIA_URL = '/uploads/'
STATIC_ROOT = os.path.join(PROJECTDIR, 'content/static/')
STATIC_URL = '/static/'

# Admin panel settings
ADMIN_LOGIN_URL = '/manage/auth/login/'

# Options for testing.customrunner.CustomRunner
TEST_EXCLUDE = (
    'django_openid_auth',
    'crispy_forms',
    'django',
    'south',
    'imagekit',
)
TEST_RUN_ALL = False
TEST_RUNNER = 'testing.customrunner.CustomRunner'

# JSON api key
JSON_KEY = u'12341234'

# Paytrail aka. Suomen Verkkomaksut
# See http://docs.paytrail.com/fi/index-all.html for API specs
VMAKSUT_ID = u'13466'; # Test ID 
VMAKSUT_SECRET = u'6pKF4jkv97zmqBJ3ZL8gUw5DfT2NMQ'; # Test secret

# Bitpay API key etc. See https://bitpay.com/downloads/bitpayApi.pdf
BITPAY_KEY=u'ReplaceMe5uxe6ohseokaebiyae1Oox6chie3bunga';
BITPAY_SPEED=u'medium'; # Require 1 confirmation
BITPAY_EMAIL=u'jaska.jokunen@instanssi.org';

# Crispy forms stuff
CRISPY_FAIL_SILENTLY = not DEBUG
CRISPY_TEMPLATE_PACK = 'uni_form'

# Add a shared static file directory
STATICFILES_DIRS = (
    os.path.join(CONTENTDIR, 'static/'),
)

# Email backend
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Cache
if DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake'
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': '/tmp/instanssi_cache',
        }
    }

# Default file storage
DEFAULT_FILE_STORAGE = 'common.storage.ASCIIFileSystemStorage'

# How to find static files
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder'
)

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader'
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'common.http.Http403Middleware',
)

# Append to default list instead of redefining
TEMPLATE_CONTEXT_PROCESSORS += (
    'common.context_processors.short_language_code',
    'common.context_processors.google_settings',
    'social.apps.django_app.context_processors.backends',
    'social.apps.django_app.context_processors.login_redirect',
    'django.core.context_processors.request',
)

# Internal ip addresses
INTERNAL_IPS = (
    '127.0.0.1',
)

# Root urls.py file
ROOT_URLCONF = 'Instanssi.urls'

# This is a root templates dir for pages such as 404.html, 500.html, etc.
TEMPLATE_DIRS = (
    os.path.join(CONTENTDIR, 'templates/'),
)

INSTALLED_APPS = (
    'Instanssi.base_layout',
    'Instanssi.arkisto',
    'Instanssi.main2012',
    'Instanssi.main2013',
    'Instanssi.main2014',
    'Instanssi.admin_base',
    'Instanssi.admin_arkisto',
    'Instanssi.admin_blog',
    'Instanssi.admin_upload',
    'Instanssi.admin_slides',
    'Instanssi.admin_events',
    'Instanssi.admin_kompomaatti',
    'Instanssi.admin_users',
    'Instanssi.admin_profile',
    'Instanssi.admin_programme',
    'Instanssi.admin_events_overview',
    'Instanssi.admin_utils',
    'Instanssi.admin_screenshow',
    'Instanssi.admin_store',
    'Instanssi.users',
    'Instanssi.kompomaatti',
    'Instanssi.ext_blog',
    'Instanssi.ext_programme',
    'Instanssi.screenshow',
    'Instanssi.dblog',
    'Instanssi.json_api',
    'Instanssi.store',
    'Instanssi.infodesk',
    'imagekit',
    'south',
    'twitter_tag',
    'crispy_forms',
    'debug_toolbar',
    'django_tables2',
    'social.apps.django_app.default',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.formtools',
)

# Authentication backends, notice the openid backend here.
AUTHENTICATION_BACKENDS = (
    'social.backends.open_id.OpenIdAuth',
    'social.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

# Log handlers, insert our own database log handler
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'log_db': {
            'level': 'INFO',
            'class': 'Instanssi.dblog.handlers.DBLogHandler',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'Instanssi.store': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_arkisto': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_users': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_blog': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_events': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_kompomaatti': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_programme': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_upload': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_utils': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_screenshow': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_timingtool': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.admin_store': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.main2013': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.store': { 'handlers': ['log_db'], 'level': 'INFO' },
        'Instanssi.infodesk': { 'handlers': ['log_db'], 'level': 'INFO' },
    }
}

